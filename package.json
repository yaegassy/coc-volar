{
  "name": "@yaegassy/coc-volar",
  "version": "0.35.3",
  "description": "Volar (Fast Vue Language Support) extension for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "volar",
    "vue",
    "vue3",
    "typescript",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-volar"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "schema": "curl -o schemas/vue-tsconfig.schema.json https://raw.githubusercontent.com/vuejs/language-tools/master/packages/language-core/schemas/vue-tsconfig.schema.json",
    "type-check": "tsc --noEmit",
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@babel/types": "^7.21.4",
    "@types/node": "^18.18.4",
    "@typescript-eslint/eslint-plugin": "^7.1.1",
    "@typescript-eslint/parser": "^7.1.1",
    "coc.nvim": "0.0.83-next.17",
    "esbuild": "^0.16.17",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.1"
  },
  "activationEvents": [
    "onLanguage:vue"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "vue",
        "patterns": [
          "vite.config.ts",
          "vite.config.js",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "html",
        "patterns": [
          "vite.config.ts",
          "vite.config.js",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "markdown",
        "patterns": [
          "vite.config.ts",
          "vite.config.js",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "tsconfig.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "tsconfig.*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig.*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "tsconfig-*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig-*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-volar configuration",
      "properties": {
        "volar.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-volar extension."
        },
        "volar.useWorkspaceTsdk": {
          "type": "boolean",
          "default": false,
          "description": "Use workspace (project) detected tsLibs in volar. if false, use coc-volar's built-in tsLibs."
        },
        "volar.tsLocale": {
          "type": "string",
          "enum": [
            "cs",
            "de",
            "es",
            "fr",
            "it",
            "ja",
            "ko",
            "en",
            "pl",
            "pt-br",
            "ru",
            "tr",
            "zh-cn",
            "zh-tw"
          ],
          "default": "en",
          "description": "Sets the locale used to report diagnostics message from typescript."
        },
        "volar.autoCreateQuotes": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable auto creation of quotes for HTML attribute assignment."
        },
        "volar.autoClosingTags": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable autoClosing of HTML tags."
        },
        "volar.scaffoldSnippets.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable scaffold snippets completion. Typing `vue` or `vuedc` will output completion suggestions. This snippets completion feature will only work on the first line of the file."
        },
        "volar.disableCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Disable completion from Volar."
        },
        "volar.disableDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Disable diagnostics from Volar."
        },
        "volar.disableFormatting": {
          "type": "boolean",
          "default": false,
          "description": "Disable formatting from Volar."
        },
        "volar.disableProgressNotifications": {
          "type": "boolean",
          "default": false,
          "description": "Disable the initialization and workdone progress notifications."
        },
        "volar.middleware.provideCompletionItem.enable": {
          "type": "boolean",
          "default": false,
          "description": "Enable fix patch for code action issue #226"
        },
        "vue.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the language server."
        },
        "vue.server.path": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Custom path to volar server module, ~ and $HOME can also be used. If there is no setting, the built-in module will be used."
        },
        "vue.server.maxFileSize": {
          "type": "number",
          "default": 20971520,
          "description": "Maximum file size for Vue Language Server to load. (default: 20MB)"
        },
        "vue.server.petiteVue.supportHtmlFile": {
          "type": "boolean",
          "default": false,
          "description": "Recognize `.html` extension as PetiteVue file format. If you use this setting, it is recommended to enable it at the workspace (project) level. You must also place `tsconfig.json` or `jsconfig.json` in your project, and adding `__PATH_TO_HTML_FILES_/*.html` to config include option"
        },
        "vue.server.vitePress.supportMdFile": {
          "type": "boolean",
          "default": false,
          "description": "Recognize `.md` extension as VitePress file format. If you use this setting, it is recommended to enable it at the workspace (project) level. You must also place `tsconfig.json` or `jsconfig.json` in your project, and adding `__PATH_TO_MD_FILES_/*.md` to config include option"
        },
        "vue.server.diagnosticModel": {
          "type": "string",
          "default": "pull",
          "enum": [
            "push",
            "pull"
          ],
          "enumDescriptions": [
            "Diagnostic push by language server.",
            "Diagnostic pull by language client."
          ],
          "description": "Diagnostic update model."
        },
        "vue.server.maxOldSpaceSize": {
          "type": [
            "number",
            "null"
          ],
          "default": null,
          "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it."
        },
        "vue.server.additionalExtensions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List any additional file extensions that should be processed as Vue files (requires restart)."
        },
        "vue.codeActions.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enabled code actions."
        },
        "vue.codeLens.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enabled code lens."
        },
        "vue.complete.casing.tags": {
          "type": "string",
          "enum": [
            "autoKebab",
            "autoPascal",
            "kebab",
            "pascal"
          ],
          "enumDescriptions": [
            "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
            "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
            "<kebab-case>",
            "<PascalCase>"
          ],
          "default": "autoPascal",
          "description": "Preferred tag name case."
        },
        "vue.complete.casing.props": {
          "type": "string",
          "enum": [
            "autoKebab",
            "autoCamel",
            "kebab",
            "camel"
          ],
          "enumDescriptions": [
            "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
            "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
            ":kebab-case=\"...\"",
            ":camelCase=\"...\""
          ],
          "default": "autoKebab",
          "description": "Preferred attr name case."
        },
        "vue.autoInsert.parentheses": {
          "type": "boolean",
          "default": true,
          "description": "Auto-wrap `()` to As Expression in interpolations for fix volar-issue #520."
        },
        "vue.autoInsert.dotValue": {
          "type": "boolean",
          "default": false,
          "description": "Auto-complete Ref value with `.value`."
        },
        "vue.autoInsert.bracketSpacing": {
          "type": "boolean",
          "default": true,
          "description": "Auto add space between double curly brackets: `{{|}} -> {{ | }}`"
        },
        "vue.inlayHints.missingProps": {
          "type": "boolean",
          "default": false,
          "description": "Show inlay hints for missing required props."
        },
        "vue.inlayHints.inlineHandlerLeading": {
          "type": "boolean",
          "default": false,
          "description": "Show inlay hints for event argument in inline handlers."
        },
        "vue.inlayHints.optionsWrapper": {
          "type": "boolean",
          "default": false,
          "description": "Show inlay hints for component options wrapper for type support."
        },
        "vue.format.template.initialIndent": {
          "type": "boolean",
          "default": true
        },
        "vue.format.style.initialIndent": {
          "type": "boolean",
          "default": false
        },
        "vue.format.script.initialIndent": {
          "type": "boolean",
          "default": false
        },
        "vetur.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-vetur extension."
        }
      }
    },
    "commands": [
      {
        "command": "volar.action.doctor",
        "title": "Show Doctor info",
        "category": "Volar"
      },
      {
        "command": "vue.action.restartServer",
        "title": "Restart Vue server",
        "category": "Volar"
      },
      {
        "command": "vue.action.reloadProject",
        "title": "Reload Project"
      }
    ],
    "typescriptServerPlugins": [
      {
        "name": "@vue/typescript-plugin",
        "enableForWorkspaceTypeScriptVersions": true,
        "languages": [
          "javascript",
          "typescript",
          "vue"
        ]
      }
    ]
  },
  "dependencies": {
    "@vue/language-server": "2.0.13",
    "@vue/typescript-plugin": "2.0.7",
    "typescript": "5.3.3"
  },
  "packageManager": "yarn@1.22.19+sha1.4ba7fc5c6e704fce2066ecbfb0b0d8976fe62447"
}
