{
  "name": "@yaegassy/coc-volar",
  "version": "0.25.0",
  "description": "Volar (Fast Vue Language Support) extension for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "volar",
    "vue",
    "vue3",
    "typescript",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-volar"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "schema": "curl -o schemas/vue-tsconfig.schema.json https://raw.githubusercontent.com/johnsoncodehk/volar/master/vue-language-tools/vue-language-core/schemas/vue-tsconfig.schema.json",
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/node": "^16.11.56",
    "@typescript-eslint/eslint-plugin": "^5.36.1",
    "@typescript-eslint/parser": "^5.36.1",
    "coc.nvim": "^0.0.81",
    "esbuild": "^0.15.7",
    "eslint": "^8.23.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.2.1",
    "prettier": "^2.7.1",
    "rimraf": "^3.0.2"
  },
  "activationEvents": [
    "onLanguage:vue",
    "onLanguage:markdown",
    "onLanguage:html",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:javascriptreact",
    "onLanguage:typescriptreact",
    "onCommand:volar.initializeTakeOverMode"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "vue",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "typescript",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "javascript",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "typescriptreact",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "javascriptreact",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "html",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      },
      {
        "filetype": "markdown",
        "patterns": [
          "vite.config.ts",
          "vue.config.js",
          "nuxt.config.ts"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "tsconfig.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "tsconfig.*.json",
        "url": "https://json.schemastore.org/tsconfig"
      },
      {
        "fileMatch": "tsconfig.*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig.*.json",
        "url": "https://json.schemastore.org/jsconfig"
      },
      {
        "fileMatch": "jsconfig.*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "tsconfig-*.json",
        "url": "https://json.schemastore.org/tsconfig"
      },
      {
        "fileMatch": "tsconfig-*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      },
      {
        "fileMatch": "jsconfig-*.json",
        "url": "https://json.schemastore.org/jsconfig"
      },
      {
        "fileMatch": "jsconfig-*.json",
        "url": "./schemas/vue-tsconfig.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-volar configuration",
      "properties": {
        "volar.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-volar extension."
        },
        "volar.useWorkspaceTsdk": {
          "type": "boolean",
          "default": false,
          "description": "Use workspace (project) detected tsLibs in volar. if false, use coc-volar's built-in tsLibs."
        },
        "volar.scaffoldSnippets.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable scaffold snippets completion. Typing `vue` or `vuedc` will output completion suggestions. This snippets completion feature will only work on the first line of the file."
        },
        "volar.disableDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Disable diagnostics from Volar."
        },
        "volar.disableFormatting": {
          "type": "boolean",
          "default": false,
          "description": "Disable formatting from Volar."
        },
        "volar.disableProgressNotifications": {
          "type": "boolean",
          "default": false,
          "description": "Disable the initialization and workdone progress notifications."
        },
        "vue-semantic-server.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the language server."
        },
        "vue-syntactic-server.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the language server."
        },
        "volar.vueserver.petiteVue.processHtmlFile": {
          "type": "boolean",
          "default": false,
          "description": "Use `.html` instead of `.vue` for file extension. If you use this setting, it is recommended to enable it at the workspace (project) level. You must also place `tsconfig.json` or `jsconfig.json` in your project."
        },
        "volar.vueserver.vitePress.processMdFile": {
          "type": "boolean",
          "default": false,
          "description": "Use `.md` instead of `.vue` for file extension. If you use this setting, it is recommended to enable it at the workspace (project) level. You must also place `tsconfig.json` or `jsconfig.json` in your project."
        },
        "volar.vueserver.textDocumentSync": {
          "type": "string",
          "default": "incremental",
          "enum": [
            "incremental",
            "full",
            "none"
          ],
          "enumDescriptions": [
            "Documents are synced by sending the full content on open. After that only incremental updates to the document are send.",
            "Documents are synced by always sending the full content of the document.",
            "Documents should not be synced at all."
          ],
          "description": "Defines how the host (editor) should sync document changes to the language server. SFC incremental parser only working when config \"incremental\"."
        },
        "volar.vueserver.maxOldSpaceSize": {
          "type": [
            "number",
            "null"
          ],
          "default": null,
          "description": "Set `--max-old-space-size` option on server process. Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256"
        },
        "volar.codeLens.references": {
          "type": "boolean",
          "default": true,
          "description": "[references] code lens."
        },
        "volar.codeLens.pugTools": {
          "type": "boolean",
          "default": false,
          "description": "[pug ☐] code lens."
        },
        "volar.codeLens.scriptSetupTools": {
          "type": "boolean",
          "default": false,
          "description": "[ref sugar ☐] code lens."
        },
        "volar.autoWrapParentheses": {
          "type": "boolean",
          "default": true,
          "description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520 of volar."
        },
        "volar.autoCreateQuotes": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable auto creation of quotes for HTML attribute assignment."
        },
        "volar.autoClosingTags": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable autoClosing of HTML tags."
        },
        "volar.autoCompleteRefs": {
          "type": "boolean",
          "default": false,
          "description": "Auto-complete Ref value with '.value'."
        },
        "volar.takeOverMode.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Take over language support for *.ts."
        },
        "volar.format.initialIndent": {
          "type": "object",
          "description": "Whether to have initial indent.",
          "default": {
            "html": true
          },
          "properties": {
            "html": {
              "type": "boolean",
              "default": true
            },
            "typescript": {
              "type": "boolean",
              "default": false
            },
            "javascript": {
              "type": "boolean",
              "default": false
            },
            "typescriptreact": {
              "type": "boolean",
              "default": false
            },
            "javascriptreact": {
              "type": "boolean",
              "default": false
            },
            "css": {
              "type": "boolean",
              "default": false
            },
            "scss": {
              "type": "boolean",
              "default": false
            },
            "less": {
              "type": "boolean",
              "default": false
            },
            "json": {
              "type": "boolean",
              "default": false
            },
            "jsonc": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "volar.completion.preferredTagNameCase": {
          "type": "string",
          "enum": [
            "kebab",
            "pascal"
          ],
          "enumDescriptions": [
            "<kebab-case>",
            "<PascalCase>"
          ],
          "default": "pascal",
          "description": "Preferred tag name case."
        },
        "volar.completion.preferredAttrNameCase": {
          "type": "string",
          "enum": [
            "kebab",
            "camel"
          ],
          "enumDescriptions": [
            ":kebab-case=\"...\"",
            ":camelCase=\"...\""
          ],
          "default": "kebab",
          "description": "Preferred attr name case."
        },
        "volar.completion.autoImportComponent": {
          "type": "boolean",
          "default": true,
          "description": "Enabled auto-import for component with tag completion."
        },
        "volar.updateImportsOnFileMove.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enabled update imports on file move."
        },
        "volar.diagnostics.delay": {
          "type": "number",
          "default": 200,
          "description": "Delay time for diagnostics."
        },
        "volar.dev.serverPath": {
          "type": "string",
          "default": "",
          "description": "(For develop and check) Custom path to volar server module, ~ and $HOME, etc. can also be used. If there is no setting, the built-in module will be used "
        },
        "volar.middleware.provideCodeActions.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable fix patch for code action issue #112, #134"
        },
        "vetur.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-vetur extension."
        }
      }
    },
    "commands": [
      {
        "command": "volar.initializeTakeOverMode",
        "title": "Enable TakeOverMode in your project",
        "category": "Volar"
      },
      {
        "command": "volar.action.doctor",
        "title": "Show Doctor info",
        "category": "Volar"
      },
      {
        "command": "volar.action.restartServer",
        "title": "Restart Vue server",
        "category": "Volar"
      },
      {
        "command": "volar.action.reloadProject",
        "title": "Reload Project",
        "category": "Volar"
      },
      {
        "command": "volar.action.verifyAllScripts",
        "title": "Verify All Scripts",
        "category": "Volar"
      },
      {
        "command": "volar.action.showVirtualFiles",
        "title": "Show Virtual Files (Debug)",
        "category": "Volar (Debug)"
      },
      {
        "command": "volar.vue.findAllFileReferences",
        "title": "Vue: Find File References",
        "category": "Volar"
      }
    ]
  },
  "dependencies": {
    "@volar/vue-language-server": "1.0.1",
    "typescript": "4.8.2"
  }
}
